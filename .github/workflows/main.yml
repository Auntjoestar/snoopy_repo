name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-docker-compose:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "DB_HOST=charlie" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_NAME=testdb" >> $GITHUB_ENV
          echo "DB_USER=test" >> $GITHUB_ENV
          echo "DB_PASSWORD=test" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=['127.0.0.1', 'localhost', '0.0.0.0']" >> $GITHUB_ENV
          echo "HTTP_SERVER=8000" >> $GITHUB_ENV

      - name: Test Docker Compose Dev
        run: |
          docker compose -f docker-compose-dev.yml up -d
          docker compose -f docker-compose-dev.yml ps
          # Wait for PostgreSQL to be ready
          until docker exec snoopy_repo-charlie-1 pg_isready -h charlie -p 5432 -U test; do
            echo "Waiting for PostgreSQL to be ready...";
            sleep 5;
          done
          docker compose -f docker-compose-dev.yml exec snoopy python manage.py test snoopy_images/
          docker compose -f docker-compose-dev.yml down --volumes

      - name: Test Docker Compose Prod
        run: |
          docker compose -f docker-compose.yml up -d
          docker compose -f docker-compose.yml ps
          # Wait for PostgreSQL to be ready
          until docker exec snoopy_repo-charlie-1 pg_isready -h charlie -p 5432 -U test; do
            echo "Waiting for PostgreSQL to be ready...";
            sleep 5;
          done
          docker compose -f docker-compose.yml exec snoopy python manage.py test snoopy_images/
          docker compose -f docker-compose.yml down --volumes

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/snoopy:latest -f DOCKERFILE .
          docker push ${{ secrets.DOCKER_USERNAME }}/snoopy:latest
